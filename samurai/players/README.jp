SamurAI 3x3 2016 サンプルプレイヤについて (2016-11-24)

このディレクトリには SamurAI 3x3 2016 ゲームのサンプル AI プレイヤのソー
スプログラムと、それらのサンプルを SamurAI 3x3 2016 ゲーム管理システム
から起動する際に用いるプレイヤデータベースファイルのサンプルが入ってい
ます。

1. インストール

親ディレクトリ (manager) で make all を行うと、サンプルプレイヤもコン
パイルします。詳細は親ディレクトリの README.jp をご覧ください。

2. プレイヤデータベース

プレイヤデータベースは SamurAI 3x3 2016 ゲーム管理システムから呼び出す 
AI プレイヤの一覧です。そのフォーマットは以下のようなものです。

最初の１行はAIプレイヤのプログラムのあるディレクトリのパス名を指定します。

  <directory-path>

２行目からは、プレイヤAIの情報を１行にひとつずつ記述します。
その構成は以下のとおりです。

  <id> <name> <program-name> <command>

<id> はプレイヤAIの識別子です。
  これは、ゲーム管理システムを起動する際に与える非負の整数です。
  複数のプレイヤ AI に同じ識別子を使ってはなりません。

<name> は、当該の AI のニックネームの文字列です。

<program-name> は、プレイヤ AI のプログラム名の文字列です。
  第１行に記述する <directory-path> と連結して用います。
  ここに <directory-path> の下のサブディレクトリ内のプログラムや、
  "/" から始まる絶対パスを指定することもできます。

<command> はプログラムの起動法を表す文字列です。
  この文字列中の "$1" はプログラムへのパスで置き換えられます。たとえば
  パスが　"players/randomPlayer" で、起動法が単に "$1" なら、プログラ
  ムは "players/randomPlayer" というコマンドで起動します。もし AI プロ
  グラムが Javaで書いてあり "players/RandomPlayer.class" にコンパイル
  してあるのなら、プログラム名と起動文字列は ”players/RandomPlayer"
  と "java $1" になるでしょう。

プレイヤデータベース中に記述する文字列については、両端を二重引用符で括れば、
文字列中に空白など用いることもできます。
エスケープシーケンスや2バイトコードは使えません。
文字列内に二重引用符を含む場合はその前に '\' をつけます。

プレイヤデータベースの各行は1024文字以内でなければなりません。

配布物中の players.txt がサンプルデータベースの例になっています。

2. サンプルプレイヤ

プレイヤはそれぞれ独立したプログラムで、ゲーム管理システムから起動され
ます。このディレクトリ中に、いくつかのプレイヤの例があります。

  randomPlayer: ランダムに行動を決める。
  greedyPlayer: 浅い探索に基づいて、できるだけ多くのセクションを占領し
  　ようとする。

これらのプレイヤ、ことに greedyPlayer は、新しいプレイヤを作るときの出
発点として役立つでしょう。そのソースコード "greedyPlayer.cpp" を見ると
驚くかもしれません。これは定数を4つ定義しているだけです。

メインプログラムといくつかの関数は "players.cpp" に定義してあり、すべ
てのプレイヤ例はこれを共通に使っています。クラス "Player" のオブジェク
トがサムライの行動を決める役割を追っています。それぞれのプレイヤ例は、
それぞれがこのクラス "Player" の子クラスを定義しています。

探索のコードは "planning.cpp" にあり、ここでクラス "Player" の子クラス
であるクラス "PlanningPlayer" を定義しています。この "PlanningPlayer"
は、ある評価関数の値を最大化しようとしますが、"greedyPlayer.cpp" に定
義してある定数は、このさまざまな要素の重みを決めているのです。この重み
を変えればちょっと違う行動を取るプレイヤを簡単に作ることができます。た
とえば、"hurtingMerits" を大きくすれば、できるだけ敵のサムライがいるセ
クションを占領するようにするでしょう。また、"hidingMerits" を大きくす
れば、できるだけ身を隠そうとするようになるでしょう。

他にもいくつかプレイヤ例がありますが、これらは主に振る舞いのおかしなプ
レイヤに対するゲーム管理システムの対処をデバッグするためのものです。

  timeoutPlayer: 反応が遅い。
  tooActivePlayer: 指示する行動が多すぎる。
  nonCheckingPlayer: ときどき変な行動を指示する。

以上
