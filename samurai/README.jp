SamurAI 3x3 2016 ゲーム管理システム (2016-11-24)

このディレクトリには SamurAI 3x3 2016 のゲーム管理システムのソースコー
ドと設定例、および、プレイヤの例が入っています。ゲームの進行をグラフィ
カルに表示するビジュアライザは下記の URL のページにあり、ゲーム管理シ
ステムが生成するログファイルをここにドラッグ＆ドロップすることでグラフィ
カルに見ることができます。

   http://samuraicoding.info/software/views/samurai.html

1. 問題の報告と改良の要請

何かシステムの問題を見つけたら、以下宛に電子メールで報告してください。
	 mailto:samurai2016-contact@ipsj.or.jp
システムについての改良の要請も同様におねがいします。

2. インストール

システムは C++ で記述し、C++11 標準に合うようにしてあるはずです。多く
のシステムでは単に "make all" を実行するだけで良いだろうと思いますが、
場合によってはサブディレクトリ "manager" や "players" の中の Makefile
の最初の数行を修正する必要があるかもしれません。

システムのテストは Linux とg++ 5.4.0 版でしか行っていませんので、他の
システムではうまく動作しないかもしれません。他の環境でも動作した・動作
しなかったといったご報告をいただければ幸いです。

3. システムの動かし方

ゲーム管理システムはサブディレクトリ "manager" にあります。インストー
ルすると "gameManager" という名前の実行形式ファイルがこのディレクトリ
にできるはずです。これがゲーム管理システムのメインプログラムです。

ゲーム管理システムは標準入力からゲーム設定情報を読み込んで、標準出力に
ゲームのログを書き出します。書き出したログファイルを上述のビジュアライ
ザの Web ページにドラッグ＆ドロップすることで、ゲームの進行の様子をグ
ラフィカルに見ることができます。

通常システムは以下のようなコマンドで起動します。
 
  # manager/gameManager [<options>] <first-player> <second-player> >logfile

ここで <first-player>, <second-player> は、それぞれ先手と後手のプレイ
ヤAIを指定する識別子の整数値です。その設定の詳細は players/README.jp
を見てください。

コマンドラインオプションとして、以下のものがあります。

  -h: ヘルプ
  -g<string>: ゲーム名の文字列を指定します。
    ゲーム名はゲームの進行とは無関係ですが、表示用にログに出力します。
    指定がなければ空文字列になります。
  -a<path>: プレイヤデータベースファイルのパスの文字列を指定します。
    プレイヤデータベースファイルは
     1. オプションに指定があればそのファイル
     2. 環境変数 SAMURAIPLAYERSDB が定義されていれば、そのファイル
     3. ワーキングディレクトリのサブディレクトリ players 内の players.txt
   の優先順位で決まります。
  -p<periods>: ゲームのピリオド数を数値 <turns> で指定します。
    指定がない場合のデフォルト値は、本来の 16 ピリオドですが、
    デバッグ等のために本来のピリオド数を変更したい場合に使います。
  -m<path>: プレイヤAIへのメッセージのログをファイルに出力します。
　　先手のプレイヤへのメッセージは <path> と 0 とをつなげたファイル名の
    ファイルに、後手のプレイヤへのメッセージは <path> と 0 とをつなげた
    ファイル名のファイルに出力されます。
  　たとば、"-minput" と指定すれば、ファイル "input0" と "input1" ができます。
  　このオプションはプレイヤAIのデバッグ用を意図したものです。
  　ゲーム管理システムをこのオプションをつけて動かした後、
　　あなたのプレイヤAIにメッセージのログを標準入力として与えれば、
　　そのプログラムだけをデバッグすることができます。
  -d: ゲームの進行状況を標準エラー (stderr) に出力します。
  -d<path>: ゲームの進行状況を指定ファイルに出力します。

自動対戦システム用には、以下のように起動することもできます。

  # manager/gameManager [<options>] >logfile

この場合、プレイヤはプレイヤデータベースのエントリではなく、以下のオプ
ションで指定します。

  -A<command>: プレイヤを起動するコマンドの文字列
  -P<command>: プレイヤの実行を一時停止するコマンドの文字列
  -U<command>: プレイヤの実行を再開するコマンドの文字列
  -N<name>: プレイヤの名称の文字列

これらのうち -N 以外のオプションはそれぞれ2回ずつ指定する必要があり、
最初に先手のプレイヤ、二番目に後手のプレイヤについての指定をします。
プレイヤの名称は指定しなければ空文字列になります。

オプション指定する文字列については、両端を二重引用符で括れば、
文字列中に空白など用いることもできます。
文字列内に二重引用符を含む場合はその前に '\' をつけます。

4. 既知の問題

MacOS 上の clang を用いたインストールでは正しく動作しないことが報告さ
れています。Homebrew でインストールした g++ を用いればよいようです。

プレイヤがタイムアウトした場合にゲーム管理システム内でエラーが起きる場
合があるという報告があります。原因は調査中ですが、修正には少し時間がか
かるかもしれません。


以上
